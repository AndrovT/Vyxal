- element: '¬'
  name: Logical Not
  arity: 1
  description: Return the inverse (negation) of the truthiness of an item.
  overloads:
    num: not a
    str: a != "" | len(a) > 0
    lst: a != [] | len(a) > 0
 vectorise: false
 tests:
    - '[1] : 0'
    - '[0] : 1'
    - '["abc"] : 0'
    - '[""] : 1'
    - '[[1,2,3]] : 0'
    - '[[]] : 1'
- element: "∧"
  name: Logical And
  arity: 2
  description: Returns the first truthy argument if both are truthy, otherwise returns the first falsey argument.
  overloads:
    any-any: a and b
 vectorise: false
 tests:
    - '[0 0] : 0'
    - '["", 1] : ""'
    - '[[1,2,3], 0] : 0'
    - '[1, 2] : 2'
- element: "⟑"
  name: Reversed Logical And
  arity: 2
  description: Returns the same as logical and but with reversed arguments.
  overloads:
    any-any: b and a
 vectorise: false
 tests:
    - '[0 0] : 0'
    - '["", 1] : ""'
    - '[[1,2,3], 0] : 0'
    - '[1, 2] : 2'
- element: "∨"
  name: Logical Or
  arity: 2
  description: Returns the first truthy argument, otherwise the first falsey argument.
  overloads:
    any-any: a or b
 vectorise: false
 tests:
    - '[0 0] : 0'
    - '["", 1] : 1'
    - '[[1,2,3], 0] : [1,2,3]'
    - '[1, 2] : 1'
- element: "v"
  name: Reversed Logical Or
  arity: 2
  description: Returns the same as logical or but with reversed arguments.
  overloads:
    any-any: b or a
 vectorise: false
 tests:
    - '[0 0] : 0'
    - '["", 1] : 1'
    - '[[1,2,3], 0] : [1,2,3]'
    - '[1, 2] : 2'
- element: "÷"
  name: Item Split
  arity: 1
  description: Pushes each item of the top of the stack onto the stack.
  overloads:
    num: Push each digit of a
    str: Push each character of a
    lst: Push each item of a
 vectorise: false
 tests:
    - '[123456] : 6'
    - '["abc"] : "c"'
    - '[[1,2,3]] : 3'
- element: "×"
  name: Asterisk Literal
  arity: 0
  description: The string "*" (asterisk)
 vectorise: false
 tests:
    - '[] : "*"'
- element: "•"
  name: MultiCommand
  arity: 2
  description: Logarithm / Repeat Character / Capitalisation Transfer
  overloads:
    num-num: log_a(b)
    num-str: [char * a for char in b]
    str-num: [char * b for char in a]
    str-str: a.with_capitalisation_of(b)
    lst-lst: a molded to the shape of b
 vectorise: true
 tests:
    - '[8, 2] : 3.0'
    - '["abcde", 4] : "aaaabbbbccccddddeeee"'
    - '["abcde", "FgHIj"] : "AbCDe"'
    - '[[1,2,3,4,5,6,7], [[8, 9], 10, 11, 12, [13, 14]]] : [[1, 2], 3, 4, 5, [6, 7]]'
- element: "†"
  name: Function Call
  arity: 1
  description: Calls a function / executes as Vyxal / len(prime factors) / vectorised not
  overloads:
    fun: a()
    num: len(prime_factors(a))
    str: exec as vyxal
    lst: vectorised not
    # ...
 vectorise: false
 tests:
    - '[12] : 2'
    - '[[1, 0, 1]] : [0, 1, 0]'
