- element: "λ"
  name: Lambda
  arity: "*"
  description: Open a lambda - λ...;
- element: "ƛ"
  name: Lambda Map
  arity: 1
  description: Open a mapping lambda - ƛ
- element: "¬"
  name: Logical Not
  arity: 1
  description: Return the inverse (negation) of the truthiness of an item.
  overloads:
    num: not a
    str: a != "" | len(a) > 0
    lst: a != [] | len(a) > 0
  vectorise: false
  tests:
    - '[1] : 0'
    - '[0] : 1'
    - '["abc"] : 0'
    - '[""] : 1'
    - '[[1,2,3]] : 0'
    - '[[]] : 1'
- element: "∧"
  name: Logical And
  arity: 2
  description: Returns the first truthy argument if both are truthy, otherwise returns the first falsey argument.
  overloads:
    any-any: a and b
  vectorise: false
  tests:
    - '[0, 0] : 0'
    - '["", 1] : ""'
    - '[[1,2,3], 0] : 0'
    - '[1, 2] : 2'
- element: "⟑"
  name: Reversed Logical And
  arity: 2
  description: Returns the same as logical and but with reversed arguments.
  overloads:
    any-any: b and a
  vectorise: false
  tests:
    - '[0, 0] : 0'
    - '["", 1] : ""'
    - '[[1,2,3], 0] : 0'
    - '[1, 2] : 1'
- element: "∨"
  name: Logical Or
  arity: 2
  description: Returns the first truthy argument, otherwise the first falsey argument.
  overloads:
    any-any: a or b
  vectorise: false
  tests:
    - '[0, 0] : 0'
    - '["", 1] : 1'
    - '[[1,2,3], 0] : [1,2,3]'
    - '[1, 2] : 1'
- element: "⟇"
  name: Reversed Logical Or
  arity: 2
  description: Returns  the same as logical or but with reversed arguments.
  overloads:
    any-any: b or a
  vectorise: false
  tests:
    - '[0, 0] : 0'
    - '["", 1] : 1'
    - '[[1,2,3], 0] : [1,2,3]'
    - '[1, 2] : 2'
- element: "÷"
  name: Item Split
  arity: 1
  description: Pushes each item of the top of the stack onto the stack.
  overloads:
    num: Push each digit of a
    str: Push each character of a
    lst: Push each item of a
  vectorise: false
  tests:
    - '[123456] : 6'
    - '["abc"] : "c"'
    - '[[1,2,3]] : 3'
- element: "×"
  name: Asterisk Literal
  arity: 0
  description:  the string "*" (asterisk)
  vectorise: false
  tests:
    - '[] : "*"'
- element: "«"
  name: Base Compressed String
  arity: 0
  description: Open/close a bijective base-255 compressed string - «...«
- element: "␤"
  name: Newline
  arity: NA
  description: NOP
- element: "»"
  name: Base Compressed Number
  arity: 0
  description: Open/close a bijective base-255 compressed number - »...»
- modifier: "ß"
  name: Conditional Execute
  arity: '1 + *'
  usage: ß<elementA>
  description: Executes element A if the top of the stack is truthy
- element: "•"
  name: MultiCommand
  arity: 2
  description: 'Logarithm / Repeat Character / Capitalisation transfer'
  overloads:
    num-num: log_a(b)
    num-str: '[char * a for char in b]'
    str-num: '[char * b for char in a]'
    str-str: a.with_capitalisation_of(b)
    lst-lst: a molded  to  the shape of b
  vectorise: true
  tests:
    - '[8, 2] : 3.0'
    - '["abcde", 4] : "aaaabbbbccccddddeeee"'
    - '["abcde", "FgHIj"] : "AbCDe"'
    - '[[1,2,3,4,5,6,7], [[8, 9], 10, 11, 12, [13, 14]]] : [[1, 2], 3, 4, 5, [6, 7]]'
- element: "†"
  name: Function Call
  arity: 1
  description: Calls a function / executes as python / len(prime factors) / vectorised not
  overloads:
    fun: a()
    num: len(prime_factors(a))
    str: exec as python
    lst:  vectorised not
  vectorise: false
  tests:
    - '[12] : 2'
    - '[[1, 0, 1]] : [0, 1, 0]'
- element: "€"
  name: Split On
  arity: 2
  description: Split a on b (works on lists and numbers as well)
  overloads:
    any-any: a split on b
  vectorise: false
  tests:
    - '[1231234, 3] : ["12", "12", "4"]'
    - '["abc3def", 3] : ["abc", "def"]'
    - '[[1, 2, 3, 4, 3, 2, 1], 4] : [[1, 2, 3], [3, 2, 1]]'
- element: "½"
  name: Halve
  arity: 1
  description: Halves an item
  overloads:
    num: a / 2
    str: a split into two strings of equal lengths (as close as possible)
  vectorise: true
  tests:
    - '[8] : 4'
    - '["FizzBuzz"] : ["Fizz", "Buzz"]'
    - '[[2, 4, 6, 8]] : [1, 2, 3, 4]'
- element: "∆"
  name: Mathematic Digraph
  arity: NA
  description: Used for mathematical digraphs
- element: "ø"
  name: String Digraph
  arity: NA
  description: Used for string-based digraphs
- element: "↔"
  name: Combinations/Remove/Fixed Point Collection
  arity: 2
  description: Does either combinations_with_replacement, removes items from a not in b, or applies a on b until the result stops changing.
  overloads: 
    any-num: combinations_with_replacement(a, length=b)
    fun-any: Apply a on b until the result doesn't change, yielding intermediate values
    any-str: Remove elements from a that are not in b
    any-lst: Remove elements from a that are not in b.
  vectorise: false
  tests:
    - '["cabbage", "abcde"] : "cabbae"'
    - '[[1,3,5,6,7,7,1],[1,3,5]] : [1,3,5,1]'
    - '[[1,2],2] : [[1,1],[1,2],[2,1],[2,2]]'
- element: "¢"
  name: Infinite Replacement
  arity: 3
  description: Replace b in a with c until a doesn't change
  overloads:
    any-any-any: replace b in a with c until a doesn't change
  vectorise: false
  tests: 
    - '["{[[[]]]}","[]",""] : "{}"'
    - '[1444,44,34] : 1334'
- element: "⌐"
  name: Complement / Comma Split
  description: 1 - a if number, split by commas if string.
  arity: 1
  overloads:
    num: 1 - a
    str: a.split(",")
  vectorise: true
  tests:
    - '[5] : -4'
    - '[-5] : 6'
    - '["a,b,c"] : ["a","b","c"]'
- element: "æ"
  name: Is Prime / Case Check
  description: (a is prime) if a is a number, else check which case a is
  arity: 1
  overloads:
    num: is a prime?
    str: caseof(a) - 1 if all letters in a are uppercase, 0 if all letters in a are lowercase, -1 if mixed case
  vectorise: true
  tests:
    - '[2] : 1'
    - '[4] : 0'
    - '["a"] : 0'
    - '["A"] : 1'
    - '["!"] : -1'
- element: "ʀ"
  name: Inclusive Zero Range
  description: Inclusive range or whether each character is alphabetical
  arity: 1
  overloads:
    num: range(0,a + 1) (inclusive range from 0)
    str: '[is v alphabetical? for v in a]'
  vectorise: true
  tests:
    - '["a$c"] : [1, 0, 1]'
    - '[[1]] : [[0, 1]]'
    - '[3] : [0,1,2,3]'
- element: "ʁ"
  name: Exclusive Zero Range
  description: Exclusive range or palindromised
  arity: 1
  overloads:
    num: range(0,a) (exclusive range from 0)
    str: palindromised a
  vectorise: true
  tests:
    - '["1234"] : "1234321"'
    - '[[1]] : [[0]]'
    - '[3] : [0,1,2]'
- element: "ɾ"
  name: Inclusive One Range
  description: Inclusive range or uppercase
  arity: 1
  overloads:
    num: range(1,a+1) (inclusive range from 1)
    str: a.uppercase()
  vectorise: true
  tests:
    - '["abc"] : "ABC"'
    - '[[4, 5]] : [[1, 2, 3, 4], [1, 2, 3, 4, 5]]'
    - '[3] : [1,2,3]'
- element: "ɽ"
  name: Exclusive One Range
  description: Exclusive range or lowercase
  arity: 1
  overloads:
    num: range(1,a) (exclusive range from 0)
    str: a.lowercase()
  vectorise: true
  tests:
    - '["1"] : 1'
    - '[[0]] : 0'
    - '[3] : [1,2]'
- element: "Þ"
  name: List Digraph
  arity: NA
  description: Used for list-related digraphs
- element: "ƈ"
  name: Choose / random choice / set same
  description: Binomial coefficient / choose a random items from b / same except duplicates
  arity: 2
  overloads:
    num-num: a choose b (binomial coefficient)
    num-str: Choose a random items from b
    str-num: Choose b random items from a
    str-str: Check if lists are the same except for duplicates
  vectorise: true
  tests:
    - '[5,3] : 10'
    - '["abc","aaccb"] : 1'
    - '["abc","abcd"] : 0'
- element: "∞"
  name: Positive integers
  description: List of all non-negative integers, starting at 0
  arity: 0
- element: "¨"
  name: Other Digraphs
  arity: NA
  description: Used for various random digraphs
- element: " "
  name: Space
  arity: NA
  description: NOP
- element: "!"
  name: Stack Length
  description: Push the length of the stack
  arity: 0
  tests:
    - '[0,1,2] : 3'
    - '[1,1,1,1,1] : 5'
    - '[] : 0'
- element: '"'
  name: Pair
  arity: 2
  description: Place the top two items into a single list
  overloads:
    any-any: '[a, b]'
  vectorise: false
  tests:
    - '[1, 2] : [1, 2]'
    - '[1, 2, 3] : [2, 3]'
    - '[[1, 2, 3], "abc", 3] : ["abc", 3]'
- element: "#"
  name: Comment
  description: The characters until the next newline are commented out
  arity: NA
- element: "$"
  name: Swap
  arity: 2
  description: Swap the top two items
  overloads:
    any-any: 'b, a'
  vectorise: false
  tests:
    - '[1, 2] : 1'
    - '[1, 2, 3] : 2'
    - '[[1, 2, 3], "abc", 3] : "abc"'
- element: "%"
  name: Modulo / Format
  description: Modulo two numbers / format two strings
  arity: 2
  overloads:
    num-num: a % b
    num-str: last of (b split into a equal pieces)
    str-num: last of (a split into b equal pieces)
    str-str: a.format(b) (replace % in a with b)
    str-lst: a.format(b) (replace % in a with each item of b)
  vectorise: true
  tests:
    - '[5,3] : 2'
    - '["hello!",3] : "o!"'
    - '["Hel%ld!","lo, Wor"] : "Hello, World!"'
    - '["% and % and %",[1,2,3]] : "1 and 2 and 3"'
- modifier: "&"
  name: Apply To Register
  arity: "*"
  description: Apply the next element to the register
  usage: '&<element>'
- element: "'"
  name: Lambda Filter
  arity: 1
  description: Open a filter lambda - '...;
- element: "("
  name: Open For Loop
  arity: 1
  description: Start a for loop, iterating over the popped top of stack.
- element: ")"
  name: "Close For loop"
  description: Close a for loop
  arity: NA
- element: "*"
  name: Multiplication
  description: Multiply two numbers or strings
  arity: 2
  overloads:
    num-num: a * b
    num-str: b repeated a times
    str-num: a repeated b times
    str-str: Prepend each char of a to b
  vectorise: true
  tests:
    - '[3,5] : 15'
    - '[4,-2] : -8'
    - '[4,"*"] : "****"'
    - '["x",5] : "xxxxx"'
- element: "+"
  name: Addition
  arity: 2
  description: Adds the top two items on the stack
  overloads:
    num-num: a + b
    num-str: str(a) + b
    str-num: a + str(b)
    str-str: a + b
  vectorise: true
  tests:
    - '[1, 1] : 2'
    - '[0, -5] : -5'
    - '["abc", 5] : "abc5"'
    - '[5, "abc"] : "5abc"'
    - '["Hello, ", "World!"] : "Hello, World!"'
    - '[[1,2,3], 4] : [5, 6, 7]'
    - '[[1,2,3], [4,5,6]] : [5, 7, 9]'
- element: ","
  name: Print
  description: Print a with trailing newline
  arity: 1
  overloads:
    any: print(a)
  vectorise: false
- element: "-"
  name: Subtract
  arity: 2
  description: Subtracts the top two items on the stack
  overloads:
    num-num: a - b
    num-str: '("-" * a) + b'
    str-num: 'a + ("-" * b)'
    str-str: a.replace(b, '')
  vectorise: true
  tests:
    - '[5, 4] : 1'
    - '[0, -5] : 5'
    - '["|", 5] : "|-----"'
    - '[3, "> arrow"] : "---> arrow"'
    - '["abcbde", "b"] : "acde"'
    - '["aaa", "a"] : ""'
    - '[[1, 2, 3], [1, 2, 3]] : [0, 0, 0]'
    - '[[10, 20, 30], 5] : [5, 15, 25]'
- element: "."
  name: Decimal Separator
  description: Decimal separator
  arity: NA
- element: "/"
  name: Divide / Split
  description: Divide two numbers or split strings
  arity: 2
  overloads:
    num-num: a / b
    num-str: b split into a even length pieces, possibly with an extra part
    str-num: a split into b even length pieces, possibly with an extra part
    str-str: a.split(b)
  vectorise: true
  tests:
    - '[4,2] : 2'
    - '["abcdef",3] : ["ab","cd","ef"]'
    - '["1,2,3",","] : ["1","2","3"]'
- element: "0"
  name: Literal digit 0
  description: Literal digit 0
  arity: 0
- element: "1"
  name: Literal digit 1
  description: Literal digit 1
  arity: 0
- element: "2"
  name: Literal digit 2
  description: Literal digit 2
  arity: 0
- element: "3"
  name: Literal digit 3
  description: Literal digit 3
  arity: 0
- element: "4"
  name: Literal digit 4
  description: Literal digit 4
  arity: 0
- element: "5"
  name: Literal digit 5
  description: Literal digit 5
  arity: 0
- element: "6"
  name: Literal digit 6
  description: Literal digit 6
  arity: 0
- element: "7"
  name: Literal digit 7
  description: Literal digit 7
  arity: 0
- element: "8"
  name: Literal digit 8
  description: Literal digit 8
  arity: 0
- element: "9"
  name: Literal digit 9
  description: Literal digit 9
  arity: 0
- element: ":"
  name: Duplicate
  description: Push a twice
  arity: 1
  overloads:
    any: a,a
  vectorise: false
- element: ";"
  name: Close Structure
  description: Close a lambda / map lambda / sort lambda / function
  arity: NA
- element: "<"
  name: Less Than
  description: Basic comparison - less than
  arity: 2
  overloads:
    num-num: a < b
    num-str: str(a) < b
    str-num: a < str(b)
    str-str: a < b
  vectorise: true
  tests:  
    - '[1, 2] : 1'
    - '[2, 1] : 0'
    - '["a","b"] : 1'
    - '[-5,2] : 1'
    - '[[1,2,3],2] : [1,0,0]'
- element: "="
  name: Equals
  description: Basic comparison - equals
  arity: 2
  overloads:
    num-num: a == b
    num-str: str(a) == b
    str-num: a == str(b)
    str-str: a == b
  vectorise: true
  tests:  
    - '[1, 1] : 1'
    - '[2, 1] : 0'
    - '["a","b"] : 0'
    - '["xyz","xyz"] : 1'
    - '[[1,2,3],2] : [0,1,0]'
    - '[1,"1"] : 1'
- element: ">"
  name: Greater Than
  description: Basic comparison - greater than
  arity: 2
  overloads:
    num-num: a > b
    num-str: str(a) > b
    str-num: a > str(b)
    str-str: a > b
  vectorise: true
  tests:  
    - '[1, 2] : 0'
    - '[2, 1] : 1'
    - '["a","b"] : 0'
    - '[2,-5] : 1'
    - '[[1,2,3],2] : [0,0,1]'
    - '["5",10] : 0'
- element: "?"
  name: Input
  arity: 0
  description: Get the next input from the input source
  vectorise: false
- element: "@"
  name: Function Call / Declaration
  description: Call / declare function (@name; / @name|code;)
  arity: '* / NA'
- element: "A"
  name: All
  description: Chck if all items in a list are truthy
  arity: 1
  overloads:
    any: all(a)
  vectorise: false
  tests:
    - '[[1,2,3]] : 1'
    - '[[0,1,2]] : 0'
    - '[["",1,2]] : 0'
    - '[[]] : 1'
    - '[""] : 1'
    - '[0] : 0'
- element: "B"
  name: Binary To Decimal
  description: Convert a binary string or list to base 10
  arity: 1
  overloads:
    any: int(a,2) (convert from base 2 to base 10)
  vectorise: false
  tests:
    - '[[1,0,1]] : 5'
    - '[[1,1,1]] : 7'
    - '["1011"] : 11'
- element: "C"
  name: Chr / Ord
  description: Convert between characters and ordinals
  arity: 1
  overloads: 
    num: chr(a)
    str: ord(a) if length 1 else list of ordinals
  vectorise: true
  tests:
    - '[65] : "A"'
    - '[8482] : "™"'
    - '["Z"] : 90'
    - '["ABC"] : [65,66,67]'
    - '[[124,125,126]] : ["{","|","}"]'
- element: "D"
  name: Triplicate
  description: Push three copies of a to stack
  arity: 1
  vectorise: false
- element: "E"
  name: Two Power / Python Eval
  description: a ** 2, or eval(a)
  arity: 1
  overloads:
    num: 2 ** a
    str: eval(a) (safe-eval as python)
  vectorise: true
  tests:
    - '[0] : 1'
    - '[2] : 4'
    - '["[1,2,3]"] : [1,2,3]'
- element: "F"
  name: Filter
  description: Filter a list by another list or function.
  arity: 2
  overloads:
    any-fun: filter(b,a) (filter a by the ones that b returns a truthy result for)
    any-any: remove elements of a that are in b
  vectorise: false
  tests:
    - '[[1,2,3],[2,4,6]] : [1,3]'
    - '["abcdef","daffodil"] : "bce"'
- element: "G"
  name: Max
  description: Maximum value or a
  arity: 1
  overloads:
    any: max(a)
  vectorise: false
  tests:
    - '[[1,3,2]] : 3'
    - '["python"] : "y"'
- element: "H"
  name: Hex To Decimal
  description: Convert hexadecimal to decimal
  arity: 1
  overloads:
    any: int(a,16) (from hexadecimal)
  vectorise: false
  tests:
    - '[[1,2,3]] : 291'
    - '["b"] : 11'
    - '["beedab"] : 12512683'
- element: "I" # Useless
  name: Int
  description: Convert string or list to integer
  arity: 1
  overloads:
    num: a
    str: int(a)
    lst: int(a) (treating items in list as digits)
  vectorise: false
  tests:
    - '["5"] : 5'
    - '[5] : 5'
    - '[[5]] : 5'
- element: "J"
  name: Join
  description: Join two lists or items
  arity: 2
  overloads:
    lst-str: a.append(b) (Append)
    lst-num: a.append(b) (Append)
    str-lst: b.prepend(a) (Prepend)
    num-lst: b.prepend(a) (Prepend)
    lst-lst: merged(a,b) (Merge)
    any-any: a + b (Concatenate)
  vectorise: false
  tests:
    - '[[1,2,3],4] : [1,2,3,4]'
    - '["abc","def"] : "abcdef"'
    - '[1,[2,3,4]] : [1,2,3,4]'
    - '[[1,2],[3,4]] : [1,2,3,4]'
- element: "K"
  name: Factors / Substrings / Prefixes
  description: Get either a's factors, substrings or prefixes
  arity: 1
  overloads:
    num: divisors(a) (factors)
    str: substrings(a) (substrings)
    lst: prefixes(a) (prefixes)
  vectorise: false
  tests:
    - '[20] : [1,2,4,5,10,20]'
    - '[1] : 1'
    - '["abc"] : ["a","b","c","ab","bc","abc"]'
    - '[[1,2,3]] : [[1],[1,2],[1,2,3]]'
- element: "L"
  name: Length
  description: Get length of a
  arity: 1
  overloads:
    any: len(a)
  vectorise: false
  tests:
    - '["abc"] : 3'
    - '[[1,2,3]] : 3'
    - '[[1,2,"wrfwerfgbr",6]] : 4'
- element: "M"
  name: Map
  description: Map b over a
  arity: 2
  vectorise: false
  overloads:
    any-fun: map(b,a) (apply b to each of a)
    any-any: pair each item of b with a 
  tests:
    - '[5,[1,2,3]] : [[5,1],[5,2],[5,3]]'
    - '["z","hi"] : [["z","h"],["z","i"]]'
- element: "N"
  name: Negate / Swap Case
  description: Negate a or swap its case
  arity: 1
  overloads:
    num: -a  (negate)
    str: swap_case(a) (toggle case)
  vectorise: true
  tests:
    - '[5] : -5'
    - '[-1] : 1'
    - '["a"] : "A"'
    - '["aBc"] : "AbC"'
- element: "O"
  name: Count
  description: Count number of times b occurs in a
  arity: 2
  overloads:
    any-any: a.count(b)
  vectorise: false
  tests:
    - '[[1,2,3,4,5,4,3], 4] : 2'
    - '["abcdbacsabdcabca","a"] : 5'
- element: "P"
  name: Strip
  description: a.strip(b) - trim b from both ends of a
  arity: 2
  overloads:
    any-any: a.strip(b)
  vectorise: false
  tests:
    - '[[1, 2, 3, 4, 5, 4, 3, 2, 1], [1, 2]] : [3, 4, 5, 4, 3]'
    - '["    Hello, World!    ", " "] : "Hello, World!"'
- element: "Q"
  name: Quit
  description: Quit the program
  arity: NA
- element: "R"
  name: Reduce
  description: Reduce a by b, or reverse each item of b
  arity: 2
  overloads:
    any-fun: reduce(b,a) (Reduce a by b)
    any-any: a, vectorised_reverse(b)
  vectorise: false
  tests:
    - '[[[1,2],[3,4]]] : [[2,1],[4,3]]'
    - '[[[1,2]]] : [[2,1]]'
- element: "S"
  name: Stringify
  description: Stringify a list or number
  arity: 1
  overloads:
    any: str(a) (Stringify)
  vectorise: false
  tests:
    - '[5] : "5"'
    - '[[1,2,3]] : "⟨1|2|3⟩"'
    - '["X"] : "X"'
- element: "T"
  name: Truthy Indices
  description: Get indices of truthy elements.
  arity: 1
  overloads:
    any: truthy_indices(a)
  vectorise: false
  tests: 
    - '[[0,1,0,2]] : [1,3]'
    - '[[1,2,3,4]] : [0,1,2,3]'
- element: "U"
  name: Uniquify
  description: Remove duplicates
  arity: 1
  overloads:
    any: uniquify(a) (Remove duplicates)
  vectorise: false
  tests:
    - '[[1,3,5,5]] : [1,3,5]'
    - '["abdbcdbch"] : "abdch"'
- element: "V"
  name: Replace
  description: Replace b with c in a 
  arity: 3
  overloads: 
    any-any-any: a.replace(b,c) (replace)
  vectorise: false
  tests:
    - '["hela","a","lo"] : "hello"'
    - '["banana","n","nan"] : "banananana"'
- element: "W"
  name: Wrap
  description: Stack wrapped into a list
  arity: 0
  vectorise: false
  tests:
    - '[1,2,3] : [1,2,3]'
    - '[] : []'
    - '["hello",1,9] : ["hello",1,9]'
- element: "X" # TODO: IMPLEMENT
  name: Break
  description: Break out of the current loop or function
  arity: NA
- element: "Y"
  name: Interleave
  description: Interleave two lists
  arity: 2
  overloads:
    any-any: interleave(a,b)
  vectorise: false
  tests:
    - '[[1,3,5],[2,4]] : [1,2,3,4,5]'
    - '["srn","tig"] : "string"'
- element: "Z"
  name: Zip
  description: Zip two lists
  arity: 2
  overloads: 
    any-any: zip(a,b)
  vectorise: false
  tests:
    - '[[1,2],[3,4]] : [[1,3],[2,4]]'
    - '["abc",[1,2,3]] : [["a",1],["b",2],["c",3]]'
- element: "["
  name: Open If Statement
  description: Open an if Statement
  arity: 1
- element: "\\"
  name: Single char Literal
  description: Pushes a single character
  arity: 0
- element: "]"
  name: Close If Statement
  description: Close an if Statement
  arity: NA
- element: "`"
  name: String Literal
  description: A string literal - `...`
  arity: 0
- element: "^"
  name: Reverse Stack
  description: Reverse the stack.
  arity: NA
- element: "_"
  name: Pop
  description: Pop the top item of the stack
  arity: 1
  vectorise: false
- element: "a"
  name: Any
  description: Check if any items of a list are truthy
  arity: 1
  overloads: 
    any: any(a) (Are any items truthy?)
  vectorise: false
  tests:
    - '[[1,2,3]] : 1'
    - '[[0,0,0]] : 0'
    - '[[0,1,2]] : 1'
- element: "b"
  name: Binary
  description: Convert a number or string to binary
  arity: 1
  overloads:
    num: 'bin(a) - list of binary digits of A'
    str: '[bin(ord(char)) for char in a] - binary of each codepoint'
  vectorise: true
  tests:
    - '[5] : [1,0,1]'
    - '[" "] : [[1,0,0,0,0,0]]'
    - '[[2,3]] : [[1,0],[1,1]]'
- element: "c"
  name: Contains
  description: Check if one thing contains another.
  arity: 2
  overloads:
    any-any: b in a (Does a contain b, membership, contains)
  vectorise: false
  tests:
    - '["abcdef","a"] : 1'
    - '["xyz","a"] : 0'
    - '[[1,2,3],1] : 1'
    - '[[1,2,3],0] : 0'
- element: "d"
  name: Double
  description: Double a number or repeat a string twice
  arity: 1
  overloads: 
    num: a * 2 (double)
    str: a * 2 (repeated twice)
  vectorise: true
  tests:
    - '[5] : 10'
    - '[0] : 0'
    - '[[1,2]] : [2,4]'
    - '["x"] : "xx"'
    - '["ha"] : "haha"'
- element: "e"
  name: Exponentiation
  description: Exponentiate two numbers / get every nth character of a string / get length of a regex match
  arity: 2
  overloads:
    num-num: a ** b (exponentiation)
    str-num: every bth character of a
    num-str: every ath character of b
    str-str: regex.search(pattern=a, string=b).span() (Length of regex match)
  vectorise: true
  tests:
    - '[5,3] : 125'
    - '[0,0] : 1'
    - '["hello",2] : "hlo"'
- element: "f"
  name: Flatten
  description: Turn a number into a list of digits, a string into a list of characters, and flatten a list.
  arity: 1
  overloads:
    num: digits of a
    str: a split into list of characters
    lst: flatten(a) (Deep flatten)
  vectorise: false
  tests:
    - '[135] : [1,3,5]'
    - '["hi"] : ["h","i"]'
    - '[[[[1,2],3,[[4,[5]],6],7],[8,[9]]]] : [1,2,3,4,5,6,7,8,9]'
    - '[-1] : ["-",1]'
- element: "g"
  name: Minimum
  description: Take the minimum of a list
  arity: 1
  overloads:
    any: min(a)
  vectorise: false
  tests:
    - '["abc"] : "a"'
    - '[[1,4,-2]] : -2'
    - '[[5,3,9]] : 3'
- element: "h"
  name: Head
  description: First item of something
  arity: 1
  overloads: 
    any: a[0] (First item)
  tests:
    - '["hello"] : "h"'
    - '[[1,2,3]] : 1'
- element: "i"
  name: Index
  description: Index into a list
  arity: 2
  overloads:
    any-num: a[b] (Index)
    any-[x]: a[:b] (0 to bth item of a)
    any-[x,y]: a[x:y] (x to yth item of a)
    any-[x,y,m]: a[x:y:m] (x to yth item of a, taking every mth)
  vectorise: false
  tests:
    - '["abc",1] : "b"'
    - '[[1,2,3], 0] : 1'
    - '[[2,3,4,5], [2]] : [2,3]'
    - '[[1,3,5,7],[1,3]] : [3,5]'
    - '[[1,2,3,4,5,6,7,8,9,10],[1,8,2]] : [2,4,6,8]'
- element: "j"
  name: Join
  description: Join a list by a string
  arity: 2
  overloads:
    any-any: a.join(b)
  vectorise: false
  tests:
    - '[[1,2,3],"penguin"] : "1penguin2penguin3"'
    - '[["he","","o, wor","d!"], "l"] : "hello, world!"'
- element: "k"
  name: Constant Digraph
  description: Used for constant digraphs.
  arity: 0
- element: "l"
  name: Cumulative Groups
  description: Cumulative grouping / equal length
  arity: 2
  overloads:
    any-num: n-wise_group(a,b) ( Overlapping groups of a of length b)
    any-any: length(a) == length(b)
  vectorise: false
  tests:
    - '["hello",3] : ["hel","ell","llo"]'
    - '["cake",2] : ["ca","ak","ke"]'
    - '["cheese","cake"] : 0'
    - '["cheese","salads"] : 1'
- element: "m"
  name: Mirror
  description: Append input reversed to itself.
  arity: 1
  overloads: 
    num: a + reversed(a) (as number)
    str: a + reversed(a)
    lst: Append reversed(a) to a
  vectorise: false
  tests:
    - '[123] : 444'
    - '["hi"] : "hiih"'
    - '[[1,2,3]] : [1,2,3,3,2,1]'
- element: "n"
  name: Context
  description: Context variable, value of the current loop or function.
  arity: 0
- element: "o"
  name: Remove
  description: Remove instances of b in a
  arity: 2
  overloads:
    any-any: a.replace(b,"")
  vectorise: false
  tests:
    - '["hello","l"] : "heo"'
    - '[[1,2,3,1,2],1] : [2,3,2]'
    - '["bananas and naan","an"] : "bas d na"'
- element: "p"
  name: Prepend
  description: Prepend b to a
  overloads: 
    any-any: a.prepend(b) ( Prepend b to a)
  arity: 2
  vectorise: false
  tests:
    - '["ld","wor"] : "world"'
    - '[[1,2,3],13] : [13,1,2,3]'
    - '[[3,4,5],"23"] : ["23",3,4,5]'
- element: "q"
  name: Uneval
  description: Enclose in backticks, escape backslashes and backticks.
  arity: 1
  overloads: 
    any: uneval(a) (Enclose in bacticks + escape)
  vectorise: false
  tests:
    - '["\\"] : "`\\`"'
    - '["`"] : "`\``"'
    - '["a"] : "`a`"'
- element: "r"
  name: Range
  description: Range betweeen two numbers, or cumulative reduce, or regex match
  arity: 2
  overloads: 
    num-num: range(a,b) (Range form a to b)
    any-fun: cumulative_reduce(a,function=b) (Prefixes of a reduced by b)
    any-any: regex.has_match(pattern=a,string= b) ( Does b match a)
  vectorise: false
  tests:
    - '[3,6] : [3,4,5]'
    - '[4,8] : [4,5,6,7]'
- element: "s"
  name: sort
  description: Sort a list or string
  arity: 1
  overloads:
    any: sorted(a) (Sort)
  vectorise: false
  tests:
    - '[[3,1,2]] : [1,2,3]'
    - '["bca"] : "abc"'
- element: "t"
  name: Tail
  description: Last item
  arity: 1
  overloads:
    any: a[-1] (Last item)
  vectorise: false
  tests:
    - '["hello"] : "o"'
    - '[[1,2,3]] : 3'
- element: "u"
  name: Minus One
  description: Push -1
  arity: 0
  tests:
    - '[] : -1'
- modifier: "v"
  name: Vectorise
  description: Vectorise an element
  arity: '*'
  usage: v<element>
- element: "w"
  name: Listify
  description: a wrapped in a singleton list
  arity: 1
  overloads:
    any: '[a] (Wrapped in singleton list)'
  vectorise: false
  tests:
    - '[1] : [1]'
    - '["hello"] : ["hello"]'
    - '[[1,2,3]] : [[1,2,3]]'
- element: "x"
  name: Recurse
  description: Call current function (Recursion)
- element: "y"
  name: Uninterleave
  description: Push every other item of a, and the rest.
  arity: 1
  overloads:
    any: a[::2], a[1::2] (Every second item, the rest)
  vectorise: false
  tests:
    - '["abcde"] : "bd"'
    - '[[1,2,3,4]] : [2,4]'
- element: "z"
  name: Zipmap
  description: Zip a with b mapped over a, or zip b with itself
  arity: 2
  overloads:
    any-fun: zip(a,map(b,a)) (Zipmap, map and zip)
    any-any: a, zip(b,b)
  vectorise: false
  tests:
    - '[1,[1,2,3]] : [[1,1],[2,2],[3,3]]'
    - '[1,"zap"] : [["z","z"], ["a","a"],["p","p"]]'
- element: "{"
  name: Open While Loop
  description: Open a while loop - `{...}`
  arity: NA
- element: "|"
  name: Branch In Structure
  description: Branch the structure - means various things depending on context
- element: "}"
  name: Close While Loop
  description: Close a while loop
- modifier: "~"
  name: Filter / Execute Without Pop
  description: For monads, filter a list by that. For dyads, execute without popping from the stack.
  usage: "~<element>"
- element: "↑"
  name: Max by Tail
  description: Maximum by last item
  arity: 1
  overloads:
    any: 'max(a, key=lambda x: x[-1]) (Maximum by last item)'
  vectorise: false
  tests:
    - '[[[3,4],[9,2]]] : [3,4]'
    - '[[1,2,3],[2,5]] : [2,5]'
- element: "↑"
  name: Min by Tail
  description: Minimum by last item
  arity: 1
  overloads:
    any: 'min(a, key=lambda x: x[-1]) (Minimum by last item)'
  vectorise: false
  tests:
    - '[[[3,4],[9,2]]] : [9,2]'
    - '[[1,2,3],[2,5]] : [1,2,3]'
- element: "∴"
  name: Dyadic Maximum
  description: Maximum of two values
  arity: 2
  overloads:
    any-any: max(a,b)
  vectorise: false
  tests:
    - '[5,3] : 5'
    - '["hello","goodbye"] : "hello"'
    - '[3,"(stuff)"] : 3'
- element: "∵"
  name: Dyadic Minimum
  description: Minimum of two values
  arity: 2
  overloads:
    any-any: min(a,b)
  vectorise: false
  tests:
    - '[5,3] : 3'
    - '["hello","goodbye"] : "goodbye"'
    - '[3,"(stuff)"] : "(stuff)"'
- element: "›"
  name: Increment
  description: Add 1 to a number
  arity: 1
  overloads:
    num: a + 1
    string: a + "1"
  vectorise: true
  tests:
    - '[5] : 6'
    - '[[3,4]] : [4,5]'
    - '["hello"] : "hello1"'
- element: "‹"
  name: Decrement
  description: Subtract 1 from a number
  arity: 1
  overloads:
    num: a - 1
    str: a + "-"
  vectorise: true
  tests:
    - '[5] : 4'
    - '[[3,4]] : [2,3]'
    - '["hello"] : "hello-"'
- element: "∷"
  name: Parity
  description: A number modulo 2
  arity: 1
  overloads:
    num: a % 2 (Odd?)
    str: Second half of A
  vectorise: true
  tests:
    - '[2] : 0'
    - '[3] : 1'
    - '["hello!"] : "lo!"'
- element: "¤"
  name: Empty String
  description: The empty string
  arity: 0
  tests:
    - '[] : ""'
- element: "ð"
  name: Space
  description: A Space
  arity: 0
  tests:
    - '[] : " "'
- element: "→"
  name: Variable Set
  description: Set variable (→name)
  arity: 1
- element: "←"
  name: Variable Get
  description: Get the value of a variable (←name)
  arity: 0
- element: "β"
  name: To Base Ten
  description: Convert a number from a custom base to base 10
  arity: 2
  overloads:
    any-num: a to base 10 from number base b, treating list items / string items as digits
    str-str: a to base 10 from custom string base b, replacing values in a with their index in b and converting to base 10
  vectorise: false
  tests:
    - '[43,5] : 23'
    - '["banana","nab"] : 577'
    - '[[15,23,9],31] : 15137'
- element: "τ"
  name: From Base Ten
  description: Convert a number to a different base from base 10.
  arity: 2
  overloads:
    num-num: List of digits of a in base b
    num-str: a converted into a string of characters of b
    num-lst: a converted into a list of arbitrary values from b
  vectorise: false
  tests:
    - '[1234567,"abc"] : "cacccabbbbcab"'
    - '[1234567,5] : [3,0,4,0,0,1,2,3,2]'
    - '[928343,["he","ll","o"]] : ["ll","o","he","o","he","ll","ll","ll","ll","he","he","he","o"]'
- element: "ȧ"
  name: Absolute value
  description: Take the absolute value of a number, or remove whitespace from a string
  arity: 1
  overloads: 
    num: abs(a) (Absolute value)
    str: Remove whitespace from a
  vectorise: true
  tests:
    - '[1] : 1'
    - '[-1] : 1'
    - '[" ch ee s e "] : "cheese"'
    - '[[-1,2,-5]] : [1,2,5]'
- element: "ḃ"
  name: Boolify
  description: Convert an arbitrary value into a truthy or falsy value
  arity: 1
  overloads:
    any: bool(a) (Booliify)
  vectorise: false
  tests:
    - '[0] : 0'
    - '[1] : 1'
    - '[[]] : 0'
    - '["x"] : 1'
- element: "ċ"
  name: Not One
  description: Check if something is not equal to 1
  arity: 1
  overloads:
    any: a != 1
  vectorise: false
  tests:
    - '[[]] : 1'
    - '["1"] : 0'
    - '[5] : 1'
    - '[1] : 0'
- element: "ḋ"
  name: Divmod
  description: Divmod / combinations / trim
  arity: 2
  overloads:
    num-num: '[a // b, a % b] (Divmod - division and modulo)'
    str-num: Combinations of a with length b
    lst-num: Combinations of a with length b
    str-str: a.trim(b) # TODO: Figure out what this means
  vectorise: false
  tests:
    - '[5,3] : [1,2]'
    - '["abcd",3] : ["abc","abd","acd","bcd"]'
    - '[[1,2,3],2] : [[1,2],[1,3],[2,3]]'
- element: "ė"
  name: Enumerate
  description: Zip with a range of the same length
  arity: 1
  overloads: 
    any: enumerate(a) (Zip with 1...len(a))
  vectorise: false
  tests:
    - '["abc"] : [[0,"a"],[1,"b"],[2,"c"]]'
    - '[[1,2,3]] : [[0,1],[1,2],[2,3]]'
- element: "ḟ"
  name: Find
  description: Find a value in another
  arity: 2
  overloads:
    any-any: a.find(b) (Indexing)
    any-fun: truthy indices of mapping b over a
  vectorise: false
  tests:
    - '[[1,2,3],2] : 1'
    - '["hello","l"] : 2'
- element: "ġ"
  name: Gcd
  description: Greatest Common Denominator of a list or some numbers
  arity: '*'
  overloads: 
    lst: GCD(a) (Gcd of whole list)
    num-num: gcd(a,b) (Dyadic gcd)
    str-str: Longest common suffix of a and b
  vectorise: false
  tests: 
    - '[[1,3,2]] : 1'
    - '[[60,42,108]] : 6'
    - '[50,35] : 5'
    - '["laugh","cough"] : "ugh"'
- element: "ḣ"
  name: Head Extract
  description: Separate the first item of something and push both to stack
  arity: 1
  overloads:
    any: a[0], a[1:] (Head extract)
  vectorise: false
  tests:
    - '["hello"] : "ello"'
    - '[[1,2,3]] : [2,3]'
- element: 'ḭ'
  name: Floor Division
  description: Floor divide a by b
  arity: 2
  overloads:
    num-num: a // b (Floor division, floor(a / b))
    str-num: (a divided into b pieces)[0]
    num-str: (b divided into a pieces)[0]
    any-fun: Right reduce a by b (foldr)
    fun-any: Right reduce b by a (foldr)
  vectorise: false
  tests:
    - '[5,3] : 1'
    - '["hello!",3] : "he"'
    - '[3,"hello!"] : "he"'
- element: "ŀ"
  name: Find From Index
  description: Find one value inside another, starting from a certain index.
  arity: 3
  overloads: 
    any-any-num: a.find(b, start = c) ( Find from c)
  vectorise: false
  tests:
    - '["hello world","o",5] : 7'
    - '["hello world","l",4] : 9'
- element: "ṁ"
  name: Mean
  description: Average of a list - sum / length
  arity: 1
  overloads:
    lst: mean(a)
  vectorise: false
  tests:
    - '[[1,2,3]] : 2'
    - '[[4,71,-63]] : 4'
- element: "ṅ"
  name: Join By Nothing
  description: Join a list by the empty string
  arity: 1
  overloads:
    fun: First integer for which a(x) is truthy
    any: Join by empty string
  vectorise: false
  tests:
    - '[["a","b","c"]] : "abc"'
    - '[[1,2,3]] : 123'
- element: "ȯ"
  name: Slice
  description: Slice from an index to the end
  arity: 2
  overloads:
    fun-num: First b integers for which a(x) is truthy
    any-num: a[b:] (Slice from b to the end)
  vectorise: false
  tests:
    - '["hello",2] : "llo"'
    - '[[1,2,3],1] : [2,3]'
- element: "ṗ"
  name: Powerset
  description: All possible combinations of a
  arity: 1
  overloads: 
    any: All possible combinations of a
  vectorise: false
  tests:
    - '["ab"] : [[],["a"],["b"],["a","b"]'
    - '[1,2,3] : [[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]'
- element: "ṙ"
  name: Round
  description: Round a number to the nearest integer
  arity: 1
  overloads: 
    num: round(a)
  vectorise: true
  tests:
    - '[5.5] : 6'
    - '[3.2] : 3'
    - '[[5.5,3.2]] : [6,3]'
    - '[-4.7] : -5'
    - '[-4.5] : -4'
- element: "ṡ"
  name: Function Sort
  description: Sort a list by a function / create a range / split on a regex
  arity: 2
  overloads:
    any-fun: sorted(a, key=b) (Sort by b)
    num-num: range(a, b + 1) (Inclusive range from a to b)
    str-str: regex.split(string=a, pattern=b)
  vectorise: false
  tests:
    - '[3,4] : [3,4]'
    - '[1,5] : [1,2,3,4,5]'
    - '["abc1def2ghi","\d+"] : ["abc","def","ghi"]'
- element: "ṫ"
  name: Tail Extract
  description: Remove the last item and push both onto the stack
  arity: 1
  overloads: 
    any: a[:-1],a[-1]
  vectorise: false
  tests:
    - '["abc"] : "c"'
    - '[[1,2,3]] : 3'
- element: "ẇ"
  name: Chunk Wrap
  description: Wrap a list in chunks of a certain length / apply a function to every second item of a list
  arity: 2
  overloads:
    any-num: a wrapped in chunks of length b
    any-fun: Apply b to every second item of a
    fun-any: Apply a to every second item of b
  vectorise: false
  tests:
    - '["abcdef",2] : ["ab","cd","ef"]'
    - '[[1,2,3,4,5,6],3] : [[1,2,3],[4,5,6]]'
- element: "ẋ"
  name: Repeat
  description: Repeat a value several times
  arity: "*"
  overloads:
    any-num: Repeat a b times
    fun-fun-any: Collect results of applying b on c while a(c) is truthy
  vectorise: false
  tests: 
    - '[[1,2,3],3] : [[1,2,3],[1,2,3],[1,2,3]]'
    - '["x",5] : "xxxxx"'
- element: "ẏ"
  name: Exclusive Range Length
  description: Range from 0 to length of a
  arity: 1
  overloads:
    any: range(0, len(a)) (Exclusive range from 0 to length of a)
  vectorise: false
  tests:
    - '["abc"] : [0,1,2]'
    - '[[1,2]] : [0,1]'
- element: "ż"
  name: Inclusive Range Length
  description: Range from 1 to length of a inclusive
  arity: 1
  overloads:
    any: range(1, len(a)+1) (Inclusive range from 1 to length of a)
  vectorise: false
  tests:
    - '["abc"] : [1,2,3]'
    - '[[1,2]] : [1,2]'
- element: "√"
  name: Square Root
  description: Square root a number / every second character of a
  arity: 1
  overloads:
    num: sqrt(a) (Square root)
    str: every second character of a
  vectorise: true
  tests: 
    - '[4] : 2'
    - '["hello"] : "hlo"'
- element: "⟨"
  name: Open List
  description: Open a list - ⟨...⟩
  arity: 0
- element: "⟩"
  name: Close list
  description: Close a list - ⟨...⟩
  arity: 1
- element: "‛"
  name: Two Character String
  description: Collect the next two characters as a string - ‛..
  arity: 0
- element: "₀"
  name: Ten
  description: Push 10 to the stack
  arity: 0
  tests:
    - '[] : 10'
- element: "₁"
  name: Hundred
  description: Push 100 to the stack
  arity: 0
  tests:
    - '[] : 100'
- element: "₂"
  name: Is Even
  description: Check if a value is even
  arity: 1
  overloads:
    num: a % 2 == 0 (Even?)
    any: len(a) % 2 == 0 (Length even?)
  vectorise: false
  tests:
    - '[5] : 0'
    - '[2] : 1'
    - '["hello"] : 0'
    - '[[1,2]] : 1'
- element: "₃"
  name: Divisible By three
  description: Check if a is divisible by 3
  arity: 1
  overloads:
    num: a % 3 == 0 (divisible by 3?)
    any: len(a) == 1 (Length is 1?)
  vectorise: false
  tests:
    - '[5] : 0'
    - '[6] : 1'
    - '["hi"] : 0'
    - '[[1]] : 1'
- element: "₄"
  name: Twenty Six
  description: Push 26 to the stack
  arity: 0
  tests:
    - '[] : 26'
- element: "₅"
  name: Divisible By Five
  description: Check if a is divisible by 5
  arity: 1
  overloads: 
    num: a % 5 == 0
    any: a, len(a)
  vectorise: false
  tests:
    - '[4] : 0'
    - '[5] : 1'
    - '["hello"] : 5'
    - '[[1,2,3]] : 3'
- element: "₆"
  name: Sixty Four
  description: Push 64 to the stack
  arity: 0
  tests:
    - '[] : 64'
- element: "₇"
  name: One Twenty Eight
  description: Push 128 to the stack
  arity: 0
  tests:
    - '[] : 128'
- element: "₈"
  name: Two Fifty Six
  description: Push 256 to the stack
  arity: 0
  tests:
    - '[] : 256'
- element: "¶"
  name: Newline
  description: Push a newline to the stack
  arity: 0
  tests:
    - '[] : "\\n"'