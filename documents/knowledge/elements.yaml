- element: "λ"
  name: Lambda
  arity: "*"
  description: Open a lambda - λ...;
- element: "ƛ"
  name: Lambda Map
  arity: 1
  description: Open a mapping lambda - ƛ
- element: "¬"
  name: Logical Not
  arity: 1
  description: Return the inverse (negation) of the truthiness of an item.
  overloads:
    num: not a
    str: a != "" | len(a) > 0
    lst: a != [] | len(a) > 0
  vectorise: false
  tests:
    - '[1] : 0'
    - '[0] : 1'
    - '["abc"] : 0'
    - '[""] : 1'
    - '[[1,2,3]] : 0'
    - '[[]] : 1'
- element: "∧"
  name: Logical And
  arity: 2
  description: Returns the first truthy argument if both are truthy, otherwise returns the first falsey argument.
  overloads:
    any-any: a and b
  vectorise: false
  tests:
    - '[0, 0] : 0'
    - '["", 1] : ""'
    - '[[1,2,3], 0] : 0'
    - '[1, 2] : 2'
- element: "⟑"
  name: Reversed Logical And
  arity: 2
  description: Returns the same as logical and but with reversed arguments.
  overloads:
    any-any: b and a
  vectorise: false
  tests:
    - '[0, 0] : 0'
    - '["", 1] : ""'
    - '[[1,2,3], 0] : 0'
    - '[1, 2] : 1'
- element: "∨"
  name: Logical Or
  arity: 2
  description: Returns the first truthy argument, otherwise the first falsey argument.
  overloads:
    any-any: a or b
  vectorise: false
  tests:
    - '[0, 0] : 0'
    - '["", 1] : 1'
    - '[[1,2,3], 0] : [1,2,3]'
    - '[1, 2] : 1'
- element: "⟇"
  name: Reversed Logical Or
  arity: 2
  description: Returns  the same as logical or but with reversed arguments.
  overloads:
    any-any: b or a
  vectorise: false
  tests:
    - '[0, 0] : 0'
    - '["", 1] : 1'
    - '[[1,2,3], 0] : [1,2,3]'
    - '[1, 2] : 2'
- element: "÷"
  name: Item Split
  arity: 1
  description: Pushes each item of the top of the stack onto the stack.
  overloads:
    num: Push each digit of a
    str: Push each character of a
    lst: Push each item of a
  vectorise: false
  tests:
    - '[123456] : 6'
    - '["abc"] : "c"'
    - '[[1,2,3]] : 3'
- element: "×"
  name: Asterisk Literal
  arity: 0
  description:  the string "*" (asterisk)
  vectorise: false
  tests:
    - '[] : "*"'
- element: "«"
  name: Base Compressed String
  arity: 0
  description: Open/close a bijective base-255 compressed string - «...«
- element: "␤"
  name: Newline
  arity: NA
  description: NOP
- element: "»"
  name: Base Compressed Number
  arity: 0
  description: Open/close a bijective base-255 compressed number - »...»
- modifier: "ß"
  name: Conditional Execute
  arity: 1 + *
  usage: ß<elementA>
  description: Executes element A if the top of the stack is truthy
- element: "•"
  name: MultiCommand
  arity: 2
  description: Logarithm / Repeat Character / Capitalisation  transfer
  overloads:
    num-num: log_a(b)
    num-str: [char * a for char in b]
    str-num: [char * b for char in a]
    str-str: a.with_capitalisation_of(b)
    lst-lst: a molded  to  the shape of b
  vectorise: true
  tests:
    - '[8, 2] : 3.0'
    - '["abcde", 4] : "aaaabbbbccccddddeeee"'
    - '["abcde", "FgHIj"] : "AbCDe"'
    - '[[1,2,3,4,5,6,7], [[8, 9], 10, 11, 12, [13, 14]]] : [[1, 2], 3, 4, 5, [6, 7]]'
- element: "†"
  name: Function Call
  arity: 1
  description: Calls a function / executes as  vyxal / len(prime factors) /  vectorised not
  overloads:
    fun: a()
    num: len(prime_factors(a))
    str: exec as  vyxal
    lst:  vectorised not
  vectorise: false
  tests:
    - '[12] : 2'
    - '[[1, 0, 1]] : [0, 1, 0]'
- element: "€"
  name: Split On
  arity: 2
  description: Split a on b (works on lists and numbers as well)
  overloads:
    any-any: a split on b
  vectorise: false
  tests:
    - '[1231234, 3] : ["12", "12", "4"]'
    - '["abc3def", 3] : ["abc", "def"]'
    - '[[1, 2, 3, 4, 3, 2, 1], 4] : [[1, 2, 3], [3, 2, 1]]'
- element: "½"
  name: Halve
  arity: 1
  description: Halves an item
  overloads:
    num: a / 2
    str: a split into two strings of equal lengths (as close as possible)
  vectorise: true
  tests:
    - '[8] : 4'
    - '["FizzBuzz"] : ["Fizz", "Buzz"]'
    - '[[2, 4, 6, 8]] : [1, 2, 3, 4]'
- element: "∆"
  name: Mathematic Digraph
  arity: NA
  description: Used for mathematical digraphs
- element: "↔"
- element: "+"
  name: Addition
  arity: 2
  description: Adds the top two items on the stack
  overloads:
    num-num: a + b
    num-str: str(a) + b
    str-num: a + str(b)
    str-str: a + b
  vectorise: true
  tests:
    - '[1, 1] : 2'
    - '[0, -5] : -5'
    - '["abc", 5] : "abc5"'
    - '[5, "abc"] : "5abc"'
    - '["Hello, ", "World!"] : "Hello, World!"'
    - '[[1,2,3], 4] : [5, 6, 7]'
    - '[[1,2,3], [4,5,6]] : [5, 7, 9]'
- element: "-"
  name: Subtract
  arity: 2
  description: Subtracts the top two items on the stack
  overloads:
    num-num: a - b
    num-str: '("-" * a) + b'
    str-num: 'a + ("-" * b)'
    str-str: a.replace(b, '')
  vectorise: true
  tests:
    - '[5, 4] : 1'
    - '[0, -5] : 5'
    - '["|", 5] : "|-----"'
    - '[3, "> arrow"] : "---> arrow"'
    - '["abcbde", "b"] : "acde"'
    - '["aaa", "a"] : ""'
    - '[[1, 2, 3], [1, 2, 3]] : [0, 0, 0]'
    - '[[10, 20, 30], 5] : [5, 15, 25]'
- element: "?"
  name: Input
  arity: 0
  description: Get the next input from the input source
  vectorise: false
- element: '"'
  name: Pair
  arity: 2
  description: Place the top two items into a single list
  overloads:
    any-any: '[a, b]'
  vectorise: false
  tests:
    - '[1, 2] : [1, 2]'
    - '[1, 2, 3] : [2, 3]'
    - '[[1, 2, 3], "abc", 3] : ["abc", 3]'