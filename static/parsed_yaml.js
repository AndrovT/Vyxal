// Very important: DON'T EDIT THIS FILE!
// It's autogenerated
// See yaml_to_js.py

var codepage = 'λƛ¬∧⟑∨⟇÷×«␤»°•ß†€½∆ø↔¢⌐æʀʁɾɽÞƈ∞¨␠!"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]`^_abcdefghijklmnopqrstuvwxyz{|}~↑↓∴∵›‹∷¤ð→←βτȧḃċḋėḟġḣḭŀṁṅȯṗṙṡṫẇẋẏż√⟨⟩‛₀₁₂₃₄₅₆₇₈¶⁋§ε¡∑¦≈µȦḂĊḊĖḞĠḢİĿṀṄȮṖṘṠṪẆẊẎŻ₌₍⁰¹²∇⌈⌊¯±₴…□↳↲⋏⋎꘍ꜝ℅≤≥≠⁼ƒɖ∪∩⊍£¥⇧⇩ǍǎǏǐǑǒǓǔ⁽‡≬⁺↵⅛¼¾Π„‟'
var codepage_descriptions = []

codepage_descriptions.push(`Lambda
Open a lambda - λ...;
`)

codepage_descriptions.push(`Lambda Map
Open a mapping lambda - ƛ
`)

codepage_descriptions.push(`Logical Not
Return the inverse (negation) of the truthiness of an item.
num a -> not a
str a -> a != "" | len(a) > 0
lst a -> a != [] | len(a) > 0
`)

codepage_descriptions.push(`Logical And
Returns the first truthy argument if both are truthy, otherwise returns the first falsey argument.
any a, any b -> a and b
`)

codepage_descriptions.push(`Apply Lambda
Like a mapping lambda, but the results are evaluated immediately, instead of being lazily evaluated
`)

codepage_descriptions.push(`Logical Or
Returns the first truthy argument, otherwise the first falsey argument.
any a, any b -> a or b
`)

codepage_descriptions.push(`Remove at Index
Returns every item in a list except the item at the given index.
any a, num b -> Remove item b of a
num a, any b -> Remove item a of b
`)

codepage_descriptions.push(`Item Split
Pushes each item of the top of the stack onto the stack.
num a -> Push each digit of a
str a -> Push each character of a
lst a -> Push each item of a
`)

codepage_descriptions.push(`Asterisk Literal
the string "*" (asterisk)
`)

codepage_descriptions.push(`Base Compressed String
Open/close a bijective base-255 compressed string - «...«
`)

codepage_descriptions.push(`Newline
NOP
`)

codepage_descriptions.push(`Base Compressed Number
Open/close a bijective base-255 compressed number - »...»
`)

codepage_descriptions.push(`Complex Number Separator
Separates the real and imaginary parts of a complex number
`)

codepage_descriptions.push(`MultiCommand
Logarithm / Repeat Character / Capitalisation transfer
num a, num b -> log_a(b)
num a, str b -> [char * a for char in b]
str a, num b -> [char * b for char in a]
str a, str b -> a.with_capitalisation_of(b)
lst a, lst b -> a molded  to  the shape of b
`)

